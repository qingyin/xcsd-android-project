package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.GardenMail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table garden_mail.
*/
public class GardenMailDao extends AbstractDao<GardenMail, Long> {

    public static final String TABLENAME = "garden_mail";

    /**
     * Properties of entity GardenMail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MailId = new Property(1, long.class, "mailId", false, "MAIL_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property SenderId = new Property(3, Long.class, "senderId", false, "SENDER_ID");
        public final static Property SenderName = new Property(4, String.class, "senderName", false, "SENDER_NAME");
        public final static Property SenderAvatar = new Property(5, String.class, "senderAvatar", false, "SENDER_AVATAR");
        public final static Property GardenId = new Property(6, Long.class, "gardenId", false, "GARDEN_ID");
        public final static Property GardenName = new Property(7, String.class, "gardenName", false, "GARDEN_NAME");
        public final static Property GardenAvatar = new Property(8, String.class, "gardenAvatar", false, "GARDEN_AVATAR");
        public final static Property Anonymous = new Property(9, Boolean.class, "anonymous", false, "ANONYMOUS");
        public final static Property Updated = new Property(10, Boolean.class, "updated", false, "UPDATED");
        public final static Property Status = new Property(11, Integer.class, "status", false, "STATUS");
        public final static Property SendTime = new Property(12, Long.class, "sendTime", false, "SEND_TIME");
    };


    public GardenMailDao(DaoConfig config) {
        super(config);
    }
    
    public GardenMailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'garden_mail' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MAIL_ID' INTEGER NOT NULL UNIQUE ," + // 1: mailId
                "'CONTENT' TEXT," + // 2: content
                "'SENDER_ID' INTEGER," + // 3: senderId
                "'SENDER_NAME' TEXT," + // 4: senderName
                "'SENDER_AVATAR' TEXT," + // 5: senderAvatar
                "'GARDEN_ID' INTEGER," + // 6: gardenId
                "'GARDEN_NAME' TEXT," + // 7: gardenName
                "'GARDEN_AVATAR' TEXT," + // 8: gardenAvatar
                "'ANONYMOUS' INTEGER," + // 9: anonymous
                "'UPDATED' INTEGER," + // 10: updated
                "'STATUS' INTEGER," + // 11: status
                "'SEND_TIME' INTEGER);"); // 12: sendTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'garden_mail'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GardenMail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMailId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        Long senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindLong(4, senderId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(5, senderName);
        }
 
        String senderAvatar = entity.getSenderAvatar();
        if (senderAvatar != null) {
            stmt.bindString(6, senderAvatar);
        }
 
        Long gardenId = entity.getGardenId();
        if (gardenId != null) {
            stmt.bindLong(7, gardenId);
        }
 
        String gardenName = entity.getGardenName();
        if (gardenName != null) {
            stmt.bindString(8, gardenName);
        }
 
        String gardenAvatar = entity.getGardenAvatar();
        if (gardenAvatar != null) {
            stmt.bindString(9, gardenAvatar);
        }
 
        Boolean anonymous = entity.getAnonymous();
        if (anonymous != null) {
            stmt.bindLong(10, anonymous ? 1l: 0l);
        }
 
        Boolean updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(11, updated ? 1l: 0l);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(12, status);
        }
 
        Long sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(13, sendTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GardenMail readEntity(Cursor cursor, int offset) {
        GardenMail entity = new GardenMail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // mailId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // senderId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // senderName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // senderAvatar
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // gardenId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gardenName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gardenAvatar
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // anonymous
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // updated
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // sendTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GardenMail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMailId(cursor.getLong(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSenderId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSenderName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSenderAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGardenId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setGardenName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGardenAvatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAnonymous(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setUpdated(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSendTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GardenMail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GardenMail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
