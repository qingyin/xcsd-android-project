package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.HomeWorkDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HomeWorkDetail.
*/
public class HomeWorkDetailDao extends AbstractDao<HomeWorkDetail, Long> {

    public static final String TABLENAME = "HomeWorkDetail";

    /**
     * Properties of entity HomeWorkDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberId = new Property(1, Long.class, "memberId", false, "MEMBER_ID");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property SenderName = new Property(5, String.class, "senderName", false, "SENDER_NAME");
        public final static Property TotalScore = new Property(6, Integer.class, "totalScore", false, "TOTAL_SCORE");
        public final static Property MaxScore = new Property(7, Integer.class, "maxScore", false, "MAX_SCORE");
        public final static Property SendTime = new Property(8, Long.class, "sendTime", false, "SEND_TIME");
        public final static Property ChildUserId = new Property(9, Long.class, "childUserId", false, "CHILD_USER_ID");
    };


    public HomeWorkDetailDao(DaoConfig config) {
        super(config);
    }
    
    public HomeWorkDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HomeWorkDetail' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEMBER_ID' INTEGER," + // 1: memberId
                "'STATUS' INTEGER," + // 2: status
                "'TITLE' TEXT," + // 3: title
                "'DESCRIPTION' TEXT," + // 4: description
                "'SENDER_NAME' TEXT," + // 5: senderName
                "'TOTAL_SCORE' INTEGER," + // 6: totalScore
                "'MAX_SCORE' INTEGER," + // 7: maxScore
                "'SEND_TIME' INTEGER," + // 8: sendTime
                "'CHILD_USER_ID' INTEGER);"); // 9: childUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HomeWorkDetail'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeWorkDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(2, memberId);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(6, senderName);
        }
 
        Integer totalScore = entity.getTotalScore();
        if (totalScore != null) {
            stmt.bindLong(7, totalScore);
        }
 
        Integer maxScore = entity.getMaxScore();
        if (maxScore != null) {
            stmt.bindLong(8, maxScore);
        }
 
        Long sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(9, sendTime);
        }
 
        Long childUserId = entity.getChildUserId();
        if (childUserId != null) {
            stmt.bindLong(10, childUserId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeWorkDetail readEntity(Cursor cursor, int offset) {
        HomeWorkDetail entity = new HomeWorkDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // memberId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // senderName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // totalScore
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // maxScore
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // sendTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // childUserId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeWorkDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSenderName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotalScore(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMaxScore(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSendTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setChildUserId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeWorkDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeWorkDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
