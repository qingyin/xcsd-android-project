package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.DepartmentUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table department_user.
*/
public class DepartmentUserDao extends AbstractDao<DepartmentUser, Long> {

    public static final String TABLENAME = "department_user";

    /**
     * Properties of entity DepartmentUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property DepartmentId = new Property(2, long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property Role = new Property(3, Integer.class, "role", false, "ROLE");
        public final static Property Admin = new Property(4, Boolean.class, "admin", false, "ADMIN");
        public final static Property GagSetting = new Property(5, Integer.class, "gagSetting", false, "GAG_SETTING");
    };


    public DepartmentUserDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'department_user' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' INTEGER NOT NULL ," + // 1: userId
                "'DEPARTMENT_ID' INTEGER NOT NULL ," + // 2: departmentId
                "'ROLE' INTEGER," + // 3: role
                "'ADMIN' INTEGER," + // 4: admin
                "'GAG_SETTING' INTEGER);"); // 5: gagSetting
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'department_user'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DepartmentUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getDepartmentId());
 
        Integer role = entity.getRole();
        if (role != null) {
            stmt.bindLong(4, role);
        }
 
        Boolean admin = entity.getAdmin();
        if (admin != null) {
            stmt.bindLong(5, admin ? 1l: 0l);
        }
 
        Integer gagSetting = entity.getGagSetting();
        if (gagSetting != null) {
            stmt.bindLong(6, gagSetting);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DepartmentUser readEntity(Cursor cursor, int offset) {
        DepartmentUser entity = new DepartmentUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getLong(offset + 2), // departmentId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // role
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // admin
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // gagSetting
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DepartmentUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setDepartmentId(cursor.getLong(offset + 2));
        entity.setRole(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAdmin(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setGagSetting(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DepartmentUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DepartmentUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
