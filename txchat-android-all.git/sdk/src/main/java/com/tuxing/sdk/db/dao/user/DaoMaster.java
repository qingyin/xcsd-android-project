package com.tuxing.sdk.db.dao.user;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.tuxing.sdk.db.dao.user.NoticeDao;
import com.tuxing.sdk.db.dao.user.DepartmentDao;
import com.tuxing.sdk.db.dao.user.DepartmentUserDao;
import com.tuxing.sdk.db.dao.user.UserDao;
import com.tuxing.sdk.db.dao.user.CheckInRecordDao;
import com.tuxing.sdk.db.dao.user.SettingDao;
import com.tuxing.sdk.db.dao.user.CommentDao;
import com.tuxing.sdk.db.dao.user.FeedDao;
import com.tuxing.sdk.db.dao.user.FeedMedicineTaskDao;
import com.tuxing.sdk.db.dao.user.GardenMailDao;
import com.tuxing.sdk.db.dao.user.ContentItemGroupDao;
import com.tuxing.sdk.db.dao.user.ContentItemDao;
import com.tuxing.sdk.db.dao.user.RevokedMessageDao;
import com.tuxing.sdk.db.dao.user.ClassPictureDao;
import com.tuxing.sdk.db.dao.user.ActivityDao;
import com.tuxing.sdk.db.dao.user.LightAppDao;
import com.tuxing.sdk.db.dao.user.HomeWorkRecordDao;
import com.tuxing.sdk.db.dao.user.HomeWorkClassDao;
import com.tuxing.sdk.db.dao.user.HomeWorkMemberDao;
import com.tuxing.sdk.db.dao.user.HomeWorkUserRankDao;
import com.tuxing.sdk.db.dao.user.HomeWorkGenerateDao;
import com.tuxing.sdk.db.dao.user.HomeWorkDetailDao;
import com.tuxing.sdk.db.dao.user.GameLevelDao;
import com.tuxing.sdk.db.dao.user.AbilityDetailListDao;
import com.tuxing.sdk.db.dao.user.AbilityPointDao;
import com.tuxing.sdk.db.dao.user.Game_ScoreDao;
import com.tuxing.sdk.db.dao.user.ScoreShowDao;
import com.tuxing.sdk.db.dao.user.TestListDao;
import com.tuxing.sdk.db.dao.user.CourseDao;
import com.tuxing.sdk.db.dao.user.CourseLessonDao;
import com.tuxing.sdk.db.dao.user.DataReportDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 8): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 8;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        NoticeDao.createTable(db, ifNotExists);
        DepartmentDao.createTable(db, ifNotExists);
        DepartmentUserDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        CheckInRecordDao.createTable(db, ifNotExists);
        SettingDao.createTable(db, ifNotExists);
        CommentDao.createTable(db, ifNotExists);
        FeedDao.createTable(db, ifNotExists);
        FeedMedicineTaskDao.createTable(db, ifNotExists);
        GardenMailDao.createTable(db, ifNotExists);
        ContentItemGroupDao.createTable(db, ifNotExists);
        ContentItemDao.createTable(db, ifNotExists);
        RevokedMessageDao.createTable(db, ifNotExists);
        ClassPictureDao.createTable(db, ifNotExists);
        ActivityDao.createTable(db, ifNotExists);
        LightAppDao.createTable(db, ifNotExists);
        HomeWorkRecordDao.createTable(db, ifNotExists);
        HomeWorkClassDao.createTable(db, ifNotExists);
        HomeWorkMemberDao.createTable(db, ifNotExists);
        HomeWorkUserRankDao.createTable(db, ifNotExists);
        HomeWorkGenerateDao.createTable(db, ifNotExists);
        HomeWorkDetailDao.createTable(db, ifNotExists);
        GameLevelDao.createTable(db, ifNotExists);
        AbilityDetailListDao.createTable(db, ifNotExists);
        AbilityPointDao.createTable(db, ifNotExists);
        Game_ScoreDao.createTable(db, ifNotExists);
        ScoreShowDao.createTable(db, ifNotExists);
        TestListDao.createTable(db, ifNotExists);
        CourseDao.createTable(db, ifNotExists);
        CourseLessonDao.createTable(db, ifNotExists);
        DataReportDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        NoticeDao.dropTable(db, ifExists);
        DepartmentDao.dropTable(db, ifExists);
        DepartmentUserDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        CheckInRecordDao.dropTable(db, ifExists);
        SettingDao.dropTable(db, ifExists);
        CommentDao.dropTable(db, ifExists);
        FeedDao.dropTable(db, ifExists);
        FeedMedicineTaskDao.dropTable(db, ifExists);
        GardenMailDao.dropTable(db, ifExists);
        ContentItemGroupDao.dropTable(db, ifExists);
        ContentItemDao.dropTable(db, ifExists);
        RevokedMessageDao.dropTable(db, ifExists);
        ClassPictureDao.dropTable(db, ifExists);
        ActivityDao.dropTable(db, ifExists);
        LightAppDao.dropTable(db, ifExists);
        HomeWorkRecordDao.dropTable(db, ifExists);
        HomeWorkClassDao.dropTable(db, ifExists);
        HomeWorkMemberDao.dropTable(db, ifExists);
        HomeWorkUserRankDao.dropTable(db, ifExists);
        HomeWorkGenerateDao.dropTable(db, ifExists);
        HomeWorkDetailDao.dropTable(db, ifExists);
        GameLevelDao.dropTable(db, ifExists);
        AbilityDetailListDao.dropTable(db, ifExists);
        AbilityPointDao.dropTable(db, ifExists);
        Game_ScoreDao.dropTable(db, ifExists);
        ScoreShowDao.dropTable(db, ifExists);
        TestListDao.dropTable(db, ifExists);
        CourseDao.dropTable(db, ifExists);
        CourseLessonDao.dropTable(db, ifExists);
        DataReportDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(NoticeDao.class);
        registerDaoClass(DepartmentDao.class);
        registerDaoClass(DepartmentUserDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(CheckInRecordDao.class);
        registerDaoClass(SettingDao.class);
        registerDaoClass(CommentDao.class);
        registerDaoClass(FeedDao.class);
        registerDaoClass(FeedMedicineTaskDao.class);
        registerDaoClass(GardenMailDao.class);
        registerDaoClass(ContentItemGroupDao.class);
        registerDaoClass(ContentItemDao.class);
        registerDaoClass(RevokedMessageDao.class);
        registerDaoClass(ClassPictureDao.class);
        registerDaoClass(ActivityDao.class);
        registerDaoClass(LightAppDao.class);
        registerDaoClass(HomeWorkRecordDao.class);
        registerDaoClass(HomeWorkClassDao.class);
        registerDaoClass(HomeWorkMemberDao.class);
        registerDaoClass(HomeWorkUserRankDao.class);
        registerDaoClass(HomeWorkGenerateDao.class);
        registerDaoClass(HomeWorkDetailDao.class);
        registerDaoClass(GameLevelDao.class);
        registerDaoClass(AbilityDetailListDao.class);
        registerDaoClass(AbilityPointDao.class);
        registerDaoClass(Game_ScoreDao.class);
        registerDaoClass(ScoreShowDao.class);
        registerDaoClass(TestListDao.class);
        registerDaoClass(CourseDao.class);
        registerDaoClass(CourseLessonDao.class);
        registerDaoClass(DataReportDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
