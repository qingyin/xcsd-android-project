package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.Notice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table notice.
*/
public class NoticeDao extends AbstractDao<Notice, Long> {

    public static final String TABLENAME = "notice";

    /**
     * Properties of entity Notice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoticeId = new Property(1, long.class, "noticeId", false, "NOTICE_ID");
        public final static Property SenderUserId = new Property(2, Long.class, "senderUserId", false, "SENDER_USER_ID");
        public final static Property SenderName = new Property(3, String.class, "senderName", false, "SENDER_NAME");
        public final static Property SenderAvatar = new Property(4, String.class, "senderAvatar", false, "SENDER_AVATAR");
        public final static Property Summary = new Property(5, String.class, "summary", false, "SUMMARY");
        public final static Property Unread = new Property(6, Boolean.class, "unread", false, "UNREAD");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Attachments = new Property(8, String.class, "attachments", false, "ATTACHMENTS");
        public final static Property SendTime = new Property(9, Long.class, "sendTime", false, "SEND_TIME");
        public final static Property Mailbox = new Property(10, int.class, "mailbox", false, "MAILBOX");
    };


    public NoticeDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'notice' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NOTICE_ID' INTEGER NOT NULL UNIQUE ," + // 1: noticeId
                "'SENDER_USER_ID' INTEGER," + // 2: senderUserId
                "'SENDER_NAME' TEXT," + // 3: senderName
                "'SENDER_AVATAR' TEXT," + // 4: senderAvatar
                "'SUMMARY' TEXT," + // 5: summary
                "'UNREAD' INTEGER," + // 6: unread
                "'CONTENT' TEXT," + // 7: content
                "'ATTACHMENTS' TEXT," + // 8: attachments
                "'SEND_TIME' INTEGER," + // 9: sendTime
                "'MAILBOX' INTEGER NOT NULL );"); // 10: mailbox
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'notice'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getNoticeId());
 
        Long senderUserId = entity.getSenderUserId();
        if (senderUserId != null) {
            stmt.bindLong(3, senderUserId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(4, senderName);
        }
 
        String senderAvatar = entity.getSenderAvatar();
        if (senderAvatar != null) {
            stmt.bindString(5, senderAvatar);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(6, summary);
        }
 
        Boolean unread = entity.getUnread();
        if (unread != null) {
            stmt.bindLong(7, unread ? 1l: 0l);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String attachments = entity.getAttachments();
        if (attachments != null) {
            stmt.bindString(9, attachments);
        }
 
        Long sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(10, sendTime);
        }
        stmt.bindLong(11, entity.getMailbox());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Notice readEntity(Cursor cursor, int offset) {
        Notice entity = new Notice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // noticeId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // senderUserId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // senderName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // senderAvatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // summary
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // unread
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // attachments
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // sendTime
            cursor.getInt(offset + 10) // mailbox
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoticeId(cursor.getLong(offset + 1));
        entity.setSenderUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSenderName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSenderAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSummary(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnread(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAttachments(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSendTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setMailbox(cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Notice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Notice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
