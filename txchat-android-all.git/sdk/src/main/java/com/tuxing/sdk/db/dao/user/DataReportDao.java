package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.DataReport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tblDataReport.
*/
public class DataReportDao extends AbstractDao<DataReport, Long> {

    public static final String TABLENAME = "tblDataReport";

    /**
     * Properties of entity DataReport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property EventType = new Property(2, int.class, "eventType", false, "EVENT_TYPE");
        public final static Property Bid = new Property(3, String.class, "bid", false, "BID");
        public final static Property Timestamp = new Property(4, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property IsSended = new Property(5, boolean.class, "isSended", false, "IS_SENDED");
        public final static Property SerialNo = new Property(6, Long.class, "serialNo", false, "SERIAL_NO");
        public final static Property ExtendedInfo = new Property(7, String.class, "extendedInfo", false, "EXTENDED_INFO");
    };


    public DataReportDao(DaoConfig config) {
        super(config);
    }
    
    public DataReportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'tblDataReport' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' INTEGER NOT NULL ," + // 1: userId
                "'EVENT_TYPE' INTEGER NOT NULL ," + // 2: eventType
                "'BID' TEXT," + // 3: bid
                "'TIMESTAMP' INTEGER NOT NULL ," + // 4: timestamp
                "'IS_SENDED' INTEGER NOT NULL ," + // 5: isSended
                "'SERIAL_NO' INTEGER," + // 6: serialNo
                "'EXTENDED_INFO' TEXT);"); // 7: extendedInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'tblDataReport'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DataReport entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindLong(3, entity.getEventType());
 
        String bid = entity.getBid();
        if (bid != null) {
            stmt.bindString(4, bid);
        }
        stmt.bindLong(5, entity.getTimestamp());
        stmt.bindLong(6, entity.getIsSended() ? 1l: 0l);
 
        Long serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindLong(7, serialNo);
        }
 
        String extendedInfo = entity.getExtendedInfo();
        if (extendedInfo != null) {
            stmt.bindString(8, extendedInfo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DataReport readEntity(Cursor cursor, int offset) {
        DataReport entity = new DataReport( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getInt(offset + 2), // eventType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bid
            cursor.getLong(offset + 4), // timestamp
            cursor.getShort(offset + 5) != 0, // isSended
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // serialNo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // extendedInfo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DataReport entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setEventType(cursor.getInt(offset + 2));
        entity.setBid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimestamp(cursor.getLong(offset + 4));
        entity.setIsSended(cursor.getShort(offset + 5) != 0);
        entity.setSerialNo(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setExtendedInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DataReport entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DataReport entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
