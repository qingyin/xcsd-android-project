package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.HomeWorkClass;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HomeWorkClass.
*/
public class HomeWorkClassDao extends AbstractDao<HomeWorkClass, Long> {

    public static final String TABLENAME = "HomeWorkClass";

    /**
     * Properties of entity HomeWorkClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HomeworkId = new Property(1, Long.class, "homeworkId", false, "HOMEWORK_ID");
        public final static Property ClassName = new Property(2, String.class, "className", false, "CLASS_NAME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property SendTime = new Property(5, Long.class, "sendTime", false, "SEND_TIME");
        public final static Property FinishedCount = new Property(6, Integer.class, "finishedCount", false, "FINISHED_COUNT");
        public final static Property TotalCount = new Property(7, Integer.class, "totalCount", false, "TOTAL_COUNT");
    };


    public HomeWorkClassDao(DaoConfig config) {
        super(config);
    }
    
    public HomeWorkClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HomeWorkClass' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'HOMEWORK_ID' INTEGER," + // 1: homeworkId
                "'CLASS_NAME' TEXT," + // 2: className
                "'TITLE' TEXT," + // 3: title
                "'TYPE' INTEGER," + // 4: type
                "'SEND_TIME' INTEGER," + // 5: sendTime
                "'FINISHED_COUNT' INTEGER," + // 6: finishedCount
                "'TOTAL_COUNT' INTEGER);"); // 7: totalCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HomeWorkClass'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeWorkClass entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long homeworkId = entity.getHomeworkId();
        if (homeworkId != null) {
            stmt.bindLong(2, homeworkId);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(3, className);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Long sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(6, sendTime);
        }
 
        Integer finishedCount = entity.getFinishedCount();
        if (finishedCount != null) {
            stmt.bindLong(7, finishedCount);
        }
 
        Integer totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindLong(8, totalCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeWorkClass readEntity(Cursor cursor, int offset) {
        HomeWorkClass entity = new HomeWorkClass( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // homeworkId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // className
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // sendTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // finishedCount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // totalCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeWorkClass entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHomeworkId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setClassName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSendTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFinishedCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTotalCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeWorkClass entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeWorkClass entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
