package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.AbilityDetailList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AbilityDetailList.
*/
public class AbilityDetailListDao extends AbstractDao<AbilityDetailList, Long> {

    public static final String TABLENAME = "AbilityDetailList";

    /**
     * Properties of entity AbilityDetailList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ability = new Property(1, Integer.class, "ability", false, "ABILITY");
        public final static Property Level = new Property(2, Integer.class, "level", false, "LEVEL");
        public final static Property AvgLevel = new Property(3, Integer.class, "avgLevel", false, "AVG_LEVEL");
        public final static Property Percentage = new Property(4, Double.class, "percentage", false, "PERCENTAGE");
        public final static Property Score = new Property(5, Integer.class, "score", false, "SCORE");
        public final static Property MaxScore = new Property(6, Integer.class, "maxScore", false, "MAX_SCORE");
    };


    public AbilityDetailListDao(DaoConfig config) {
        super(config);
    }
    
    public AbilityDetailListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AbilityDetailList' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ABILITY' INTEGER," + // 1: ability
                "'LEVEL' INTEGER," + // 2: level
                "'AVG_LEVEL' INTEGER," + // 3: avgLevel
                "'PERCENTAGE' REAL," + // 4: percentage
                "'SCORE' INTEGER," + // 5: score
                "'MAX_SCORE' INTEGER);"); // 6: maxScore
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AbilityDetailList'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AbilityDetailList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ability = entity.getAbility();
        if (ability != null) {
            stmt.bindLong(2, ability);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(3, level);
        }
 
        Integer avgLevel = entity.getAvgLevel();
        if (avgLevel != null) {
            stmt.bindLong(4, avgLevel);
        }
 
        Double percentage = entity.getPercentage();
        if (percentage != null) {
            stmt.bindDouble(5, percentage);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(6, score);
        }
 
        Integer maxScore = entity.getMaxScore();
        if (maxScore != null) {
            stmt.bindLong(7, maxScore);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AbilityDetailList readEntity(Cursor cursor, int offset) {
        AbilityDetailList entity = new AbilityDetailList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ability
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // level
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // avgLevel
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // percentage
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // score
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // maxScore
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AbilityDetailList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAbility(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLevel(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAvgLevel(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPercentage(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setScore(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMaxScore(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AbilityDetailList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AbilityDetailList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
