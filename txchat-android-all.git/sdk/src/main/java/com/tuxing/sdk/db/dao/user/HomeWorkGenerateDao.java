package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.HomeWorkGenerate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HomeWorkGenerate.
*/
public class HomeWorkGenerateDao extends AbstractDao<HomeWorkGenerate, Long> {

    public static final String TABLENAME = "HomeWorkGenerate";

    /**
     * Properties of entity HomeWorkGenerate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChildUserId = new Property(1, Long.class, "childUserId", false, "CHILD_USER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property GenerateCount = new Property(4, Integer.class, "generateCount", false, "GENERATE_COUNT");
        public final static Property RemainMaxCount = new Property(5, Integer.class, "remainMaxCount", false, "REMAIN_MAX_COUNT");
        public final static Property SpecialAttention = new Property(6, Boolean.class, "specialAttention", false, "SPECIAL_ATTENTION");
    };


    public HomeWorkGenerateDao(DaoConfig config) {
        super(config);
    }
    
    public HomeWorkGenerateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HomeWorkGenerate' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CHILD_USER_ID' INTEGER," + // 1: childUserId
                "'NAME' TEXT," + // 2: name
                "'AVATAR' TEXT," + // 3: avatar
                "'GENERATE_COUNT' INTEGER," + // 4: generateCount
                "'REMAIN_MAX_COUNT' INTEGER," + // 5: remainMaxCount
                "'SPECIAL_ATTENTION' INTEGER);"); // 6: specialAttention
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HomeWorkGenerate'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeWorkGenerate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long childUserId = entity.getChildUserId();
        if (childUserId != null) {
            stmt.bindLong(2, childUserId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        Integer generateCount = entity.getGenerateCount();
        if (generateCount != null) {
            stmt.bindLong(5, generateCount);
        }
 
        Integer remainMaxCount = entity.getRemainMaxCount();
        if (remainMaxCount != null) {
            stmt.bindLong(6, remainMaxCount);
        }
 
        Boolean specialAttention = entity.getSpecialAttention();
        if (specialAttention != null) {
            stmt.bindLong(7, specialAttention ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeWorkGenerate readEntity(Cursor cursor, int offset) {
        HomeWorkGenerate entity = new HomeWorkGenerate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // childUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // generateCount
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // remainMaxCount
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // specialAttention
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeWorkGenerate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChildUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGenerateCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRemainMaxCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSpecialAttention(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeWorkGenerate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeWorkGenerate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
