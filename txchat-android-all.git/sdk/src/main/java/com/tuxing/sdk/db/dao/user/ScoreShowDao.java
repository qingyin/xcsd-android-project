package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.ScoreShow;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ScoreShow.
*/
public class ScoreShowDao extends AbstractDao<ScoreShow, Long> {

    public static final String TABLENAME = "ScoreShow";

    /**
     * Properties of entity ScoreShow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TotalAbilityLevel = new Property(1, Integer.class, "totalAbilityLevel", false, "TOTAL_ABILITY_LEVEL");
        public final static Property TotalAbilityPercentage = new Property(2, Double.class, "totalAbilityPercentage", false, "TOTAL_ABILITY_PERCENTAGE");
        public final static Property AbilityQuotient = new Property(3, Integer.class, "abilityQuotient", false, "ABILITY_QUOTIENT");
        public final static Property MaxAbilityQuotient = new Property(4, Integer.class, "maxAbilityQuotient", false, "MAX_ABILITY_QUOTIENT");
    };


    public ScoreShowDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreShowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ScoreShow' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TOTAL_ABILITY_LEVEL' INTEGER," + // 1: totalAbilityLevel
                "'TOTAL_ABILITY_PERCENTAGE' REAL," + // 2: totalAbilityPercentage
                "'ABILITY_QUOTIENT' INTEGER," + // 3: abilityQuotient
                "'MAX_ABILITY_QUOTIENT' INTEGER);"); // 4: maxAbilityQuotient
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ScoreShow'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScoreShow entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer totalAbilityLevel = entity.getTotalAbilityLevel();
        if (totalAbilityLevel != null) {
            stmt.bindLong(2, totalAbilityLevel);
        }
 
        Double totalAbilityPercentage = entity.getTotalAbilityPercentage();
        if (totalAbilityPercentage != null) {
            stmt.bindDouble(3, totalAbilityPercentage);
        }
 
        Integer abilityQuotient = entity.getAbilityQuotient();
        if (abilityQuotient != null) {
            stmt.bindLong(4, abilityQuotient);
        }
 
        Integer maxAbilityQuotient = entity.getMaxAbilityQuotient();
        if (maxAbilityQuotient != null) {
            stmt.bindLong(5, maxAbilityQuotient);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ScoreShow readEntity(Cursor cursor, int offset) {
        ScoreShow entity = new ScoreShow( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // totalAbilityLevel
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // totalAbilityPercentage
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // abilityQuotient
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // maxAbilityQuotient
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ScoreShow entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotalAbilityLevel(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTotalAbilityPercentage(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAbilityQuotient(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMaxAbilityQuotient(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ScoreShow entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ScoreShow entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
