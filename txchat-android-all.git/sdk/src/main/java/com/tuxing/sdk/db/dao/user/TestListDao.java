package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.TestList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TestList.
*/
public class TestListDao extends AbstractDao<TestList, Long> {

    public static final String TABLENAME = "TestList";

    /**
     * Properties of entity TestList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property AssociateTag = new Property(3, String.class, "associateTag", false, "ASSOCIATE_TAG");
        public final static Property Color = new Property(4, Integer.class, "color", false, "COLOR");
        public final static Property ColorValue = new Property(5, String.class, "colorValue", false, "COLOR_VALUE");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property AnimalPic = new Property(7, String.class, "animalPic", false, "ANIMAL_PIC");
    };


    public TestListDao(DaoConfig config) {
        super(config);
    }
    
    public TestListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TestList' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'DESCRIPTION' TEXT," + // 2: description
                "'ASSOCIATE_TAG' TEXT," + // 3: associateTag
                "'COLOR' INTEGER," + // 4: color
                "'COLOR_VALUE' TEXT," + // 5: colorValue
                "'STATUS' INTEGER," + // 6: status
                "'ANIMAL_PIC' TEXT);"); // 7: animalPic
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TestList'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TestList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String associateTag = entity.getAssociateTag();
        if (associateTag != null) {
            stmt.bindString(4, associateTag);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(5, color);
        }
 
        String colorValue = entity.getColorValue();
        if (colorValue != null) {
            stmt.bindString(6, colorValue);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        String animalPic = entity.getAnimalPic();
        if (animalPic != null) {
            stmt.bindString(8, animalPic);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TestList readEntity(Cursor cursor, int offset) {
        TestList entity = new TestList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // associateTag
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // color
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // colorValue
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // animalPic
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TestList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAssociateTag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setColor(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setColorValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAnimalPic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TestList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TestList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
