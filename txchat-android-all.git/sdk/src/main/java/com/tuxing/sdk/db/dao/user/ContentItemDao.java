package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.ContentItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table content_item.
*/
public class ContentItemDao extends AbstractDao<ContentItem, Long> {

    public static final String TABLENAME = "content_item";

    /**
     * Properties of entity ContentItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemId = new Property(1, long.class, "itemId", false, "ITEM_ID");
        public final static Property GroupId = new Property(2, Long.class, "groupId", false, "GROUP_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(4, String.class, "summary", false, "SUMMARY");
        public final static Property CoverImageUrl = new Property(5, String.class, "coverImageUrl", false, "COVER_IMAGE_URL");
        public final static Property PublishTime = new Property(6, Long.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property ContentType = new Property(7, Integer.class, "contentType", false, "CONTENT_TYPE");
        public final static Property PostUrl = new Property(8, String.class, "postUrl", false, "POST_URL");
        public final static Property Content = new Property(9, String.class, "content", false, "CONTENT");
    };


    public ContentItemDao(DaoConfig config) {
        super(config);
    }
    
    public ContentItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'content_item' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ITEM_ID' INTEGER NOT NULL UNIQUE ," + // 1: itemId
                "'GROUP_ID' INTEGER," + // 2: groupId
                "'TITLE' TEXT," + // 3: title
                "'SUMMARY' TEXT," + // 4: summary
                "'COVER_IMAGE_URL' TEXT," + // 5: coverImageUrl
                "'PUBLISH_TIME' INTEGER," + // 6: publishTime
                "'CONTENT_TYPE' INTEGER," + // 7: contentType
                "'POST_URL' TEXT," + // 8: postUrl
                "'CONTENT' TEXT);"); // 9: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'content_item'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContentItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getItemId());
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(3, groupId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(5, summary);
        }
 
        String coverImageUrl = entity.getCoverImageUrl();
        if (coverImageUrl != null) {
            stmt.bindString(6, coverImageUrl);
        }
 
        Long publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(7, publishTime);
        }
 
        Integer contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindLong(8, contentType);
        }
 
        String postUrl = entity.getPostUrl();
        if (postUrl != null) {
            stmt.bindString(9, postUrl);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContentItem readEntity(Cursor cursor, int offset) {
        ContentItem entity = new ContentItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // itemId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // summary
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // coverImageUrl
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // publishTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // contentType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // postUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // content
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContentItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemId(cursor.getLong(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSummary(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCoverImageUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublishTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setContentType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPostUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContentItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContentItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
