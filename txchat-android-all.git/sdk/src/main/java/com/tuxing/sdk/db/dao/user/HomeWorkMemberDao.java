package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.HomeWorkMember;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HomeWorkMember.
*/
public class HomeWorkMemberDao extends AbstractDao<HomeWorkMember, Long> {

    public static final String TABLENAME = "HomeWorkMember";

    /**
     * Properties of entity HomeWorkMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberId = new Property(1, Long.class, "memberId", false, "MEMBER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property Score = new Property(5, Integer.class, "score", false, "SCORE");
        public final static Property SpecialAttention = new Property(6, Boolean.class, "specialAttention", false, "SPECIAL_ATTENTION");
        public final static Property HomeworkId = new Property(7, Long.class, "homeworkId", false, "HOMEWORK_ID");
    };


    public HomeWorkMemberDao(DaoConfig config) {
        super(config);
    }
    
    public HomeWorkMemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HomeWorkMember' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MEMBER_ID' INTEGER," + // 1: memberId
                "'NAME' TEXT," + // 2: name
                "'AVATAR' TEXT," + // 3: avatar
                "'STATUS' INTEGER," + // 4: status
                "'SCORE' INTEGER," + // 5: score
                "'SPECIAL_ATTENTION' INTEGER," + // 6: specialAttention
                "'HOMEWORK_ID' INTEGER);"); // 7: homeworkId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HomeWorkMember'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeWorkMember entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(2, memberId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(6, score);
        }
 
        Boolean specialAttention = entity.getSpecialAttention();
        if (specialAttention != null) {
            stmt.bindLong(7, specialAttention ? 1l: 0l);
        }
 
        Long homeworkId = entity.getHomeworkId();
        if (homeworkId != null) {
            stmt.bindLong(8, homeworkId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeWorkMember readEntity(Cursor cursor, int offset) {
        HomeWorkMember entity = new HomeWorkMember( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // memberId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // score
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // specialAttention
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // homeworkId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeWorkMember entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setScore(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSpecialAttention(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setHomeworkId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeWorkMember entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeWorkMember entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
