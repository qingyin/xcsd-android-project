package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.Activity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table activity.
*/
public class ActivityDao extends AbstractDao<Activity, Long> {

    public static final String TABLENAME = "activity";

    /**
     * Properties of entity Activity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ActivityId = new Property(1, long.class, "activityId", false, "ACTIVITY_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Attachments = new Property(3, String.class, "attachments", false, "ATTACHMENTS");
        public final static Property SenderName = new Property(4, String.class, "senderName", false, "SENDER_NAME");
        public final static Property SenderAvatar = new Property(5, String.class, "senderAvatar", false, "SENDER_AVATAR");
        public final static Property Deleted = new Property(6, Boolean.class, "deleted", false, "DELETED");
        public final static Property CreatedOn = new Property(7, Long.class, "createdOn", false, "CREATED_ON");
    };


    public ActivityDao(DaoConfig config) {
        super(config);
    }
    
    public ActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'activity' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ACTIVITY_ID' INTEGER NOT NULL UNIQUE ," + // 1: activityId
                "'TITLE' TEXT," + // 2: title
                "'ATTACHMENTS' TEXT," + // 3: attachments
                "'SENDER_NAME' TEXT," + // 4: senderName
                "'SENDER_AVATAR' TEXT," + // 5: senderAvatar
                "'DELETED' INTEGER," + // 6: deleted
                "'CREATED_ON' INTEGER);"); // 7: createdOn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'activity'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Activity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getActivityId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String attachments = entity.getAttachments();
        if (attachments != null) {
            stmt.bindString(4, attachments);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(5, senderName);
        }
 
        String senderAvatar = entity.getSenderAvatar();
        if (senderAvatar != null) {
            stmt.bindString(6, senderAvatar);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(7, deleted ? 1l: 0l);
        }
 
        Long createdOn = entity.getCreatedOn();
        if (createdOn != null) {
            stmt.bindLong(8, createdOn);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Activity readEntity(Cursor cursor, int offset) {
        Activity entity = new Activity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // activityId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // attachments
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // senderName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // senderAvatar
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // deleted
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // createdOn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Activity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActivityId(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAttachments(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSenderName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSenderAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeleted(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCreatedOn(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Activity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Activity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
