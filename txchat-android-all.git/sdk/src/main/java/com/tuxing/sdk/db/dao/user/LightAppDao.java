package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.LightApp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table light_app.
*/
public class LightAppDao extends AbstractDao<LightApp, Long> {

    public static final String TABLENAME = "light_app";

    /**
     * Properties of entity LightApp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ModuleName = new Property(2, String.class, "moduleName", false, "MODULE_NAME");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property CounterName = new Property(6, String.class, "counterName", false, "COUNTER_NAME");
        public final static Property CounterType = new Property(7, Integer.class, "counterType", false, "COUNTER_TYPE");
        public final static Property IsNew = new Property(8, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property ShowAt = new Property(9, Integer.class, "showAt", false, "SHOW_AT");
        public final static Property CreatedOn = new Property(10, Long.class, "createdOn", false, "CREATED_ON");
    };


    public LightAppDao(DaoConfig config) {
        super(config);
    }
    
    public LightAppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'light_app' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'MODULE_NAME' TEXT," + // 2: moduleName
                "'ICON' TEXT," + // 3: icon
                "'TYPE' INTEGER," + // 4: type
                "'URL' TEXT," + // 5: url
                "'COUNTER_NAME' TEXT," + // 6: counterName
                "'COUNTER_TYPE' INTEGER," + // 7: counterType
                "'IS_NEW' INTEGER," + // 8: isNew
                "'SHOW_AT' INTEGER," + // 9: showAt
                "'CREATED_ON' INTEGER);"); // 10: createdOn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'light_app'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LightApp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String moduleName = entity.getModuleName();
        if (moduleName != null) {
            stmt.bindString(3, moduleName);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(4, icon);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String counterName = entity.getCounterName();
        if (counterName != null) {
            stmt.bindString(7, counterName);
        }
 
        Integer counterType = entity.getCounterType();
        if (counterType != null) {
            stmt.bindLong(8, counterType);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(9, isNew ? 1l: 0l);
        }
 
        Integer showAt = entity.getShowAt();
        if (showAt != null) {
            stmt.bindLong(10, showAt);
        }
 
        Long createdOn = entity.getCreatedOn();
        if (createdOn != null) {
            stmt.bindLong(11, createdOn);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LightApp readEntity(Cursor cursor, int offset) {
        LightApp entity = new LightApp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // moduleName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // icon
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // counterName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // counterType
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isNew
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // showAt
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // createdOn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LightApp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModuleName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCounterName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCounterType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsNew(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setShowAt(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCreatedOn(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LightApp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LightApp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
