package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.CourseLessonBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CourseLessonBean.
*/
public class CourseLessonDao extends AbstractDao<CourseLessonBean, Long> {

    public static final String TABLENAME = "CourseLessonBean";

    /**
     * Properties of entity CourseLessonBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CourseLessonId = new Property(1, Long.class, "CourseLessonId", false, "COURSE_LESSON_ID");
        public final static Property CreateOn = new Property(2, Long.class, "createOn", false, "CREATE_ON");
        public final static Property UpdateOn = new Property(3, Long.class, "updateOn", false, "UPDATE_ON");
        public final static Property CourseId = new Property(4, Long.class, "courseId", false, "COURSE_ID");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property StartOn = new Property(6, Long.class, "startOn", false, "START_ON");
        public final static Property EndOn = new Property(7, Long.class, "endOn", false, "END_ON");
        public final static Property VideoUrl = new Property(8, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property Hits = new Property(9, Long.class, "hits", false, "HITS");
        public final static Property LiveHits = new Property(10, Long.class, "liveHits", false, "LIVE_HITS");
        public final static Property LiveStatus = new Property(11, Integer.class, "liveStatus", false, "LIVE_STATUS");
        public final static Property Pic = new Property(12, String.class, "pic", false, "PIC");
        public final static Property Duration = new Property(13, Integer.class, "duration", false, "DURATION");
        public final static Property ResourceType = new Property(14, Integer.class, "resourceType", false, "RESOURCE_TYPE");
        public final static Property TeacherName = new Property(15, String.class, "teacherName", false, "TEACHER_NAME");
        public final static Property TeacherAvatar = new Property(16, String.class, "teacherAvatar", false, "TEACHER_AVATAR");
    };


    public CourseLessonDao(DaoConfig config) {
        super(config);
    }
    
    public CourseLessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CourseLessonBean' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'COURSE_LESSON_ID' INTEGER," + // 1: CourseLessonId
                "'CREATE_ON' INTEGER," + // 2: createOn
                "'UPDATE_ON' INTEGER," + // 3: updateOn
                "'COURSE_ID' INTEGER," + // 4: courseId
                "'TITLE' TEXT," + // 5: title
                "'START_ON' INTEGER," + // 6: startOn
                "'END_ON' INTEGER," + // 7: endOn
                "'VIDEO_URL' TEXT," + // 8: videoUrl
                "'HITS' INTEGER," + // 9: hits
                "'LIVE_HITS' INTEGER," + // 10: liveHits
                "'LIVE_STATUS' INTEGER," + // 11: liveStatus
                "'PIC' TEXT," + // 12: pic
                "'DURATION' INTEGER," + // 13: duration
                "'RESOURCE_TYPE' INTEGER," + // 14: resourceType
                "'TEACHER_NAME' TEXT," + // 15: teacherName
                "'TEACHER_AVATAR' TEXT);"); // 16: teacherAvatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CourseLessonBean'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CourseLessonBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long CourseLessonId = entity.getCourseLessonId();
        if (CourseLessonId != null) {
            stmt.bindLong(2, CourseLessonId);
        }
 
        Long createOn = entity.getCreateOn();
        if (createOn != null) {
            stmt.bindLong(3, createOn);
        }
 
        Long updateOn = entity.getUpdateOn();
        if (updateOn != null) {
            stmt.bindLong(4, updateOn);
        }
 
        Long courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindLong(5, courseId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        Long startOn = entity.getStartOn();
        if (startOn != null) {
            stmt.bindLong(7, startOn);
        }
 
        Long endOn = entity.getEndOn();
        if (endOn != null) {
            stmt.bindLong(8, endOn);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(9, videoUrl);
        }
 
        Long hits = entity.getHits();
        if (hits != null) {
            stmt.bindLong(10, hits);
        }
 
        Long liveHits = entity.getLiveHits();
        if (liveHits != null) {
            stmt.bindLong(11, liveHits);
        }
 
        Integer liveStatus = entity.getLiveStatus();
        if (liveStatus != null) {
            stmt.bindLong(12, liveStatus);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(13, pic);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(14, duration);
        }
 
        Integer resourceType = entity.getResourceType();
        if (resourceType != null) {
            stmt.bindLong(15, resourceType);
        }
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(16, teacherName);
        }
 
        String teacherAvatar = entity.getTeacherAvatar();
        if (teacherAvatar != null) {
            stmt.bindString(17, teacherAvatar);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CourseLessonBean readEntity(Cursor cursor, int offset) {
        CourseLessonBean entity = new CourseLessonBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // CourseLessonId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // createOn
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // updateOn
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // courseId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // startOn
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // endOn
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // videoUrl
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // hits
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // liveHits
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // liveStatus
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pic
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // duration
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // resourceType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // teacherName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // teacherAvatar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CourseLessonBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCourseLessonId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreateOn(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUpdateOn(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCourseId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartOn(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setEndOn(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setVideoUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHits(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setLiveHits(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setLiveStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPic(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDuration(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setResourceType(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTeacherName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTeacherAvatar(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CourseLessonBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CourseLessonBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
