package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.Department;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table department.
*/
public class DepartmentDao extends AbstractDao<Department, Long> {

    public static final String TABLENAME = "department";

    /**
     * Properties of entity Department.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DepartmentId = new Property(1, long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property ShowParents = new Property(4, Boolean.class, "showParents", false, "SHOW_PARENTS");
        public final static Property ParentId = new Property(5, Long.class, "parentId", false, "PARENT_ID");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
        public final static Property ChatGroupId = new Property(7, String.class, "chatGroupId", false, "CHAT_GROUP_ID");
        public final static Property LastSync = new Property(8, Long.class, "lastSync", false, "LAST_SYNC");
    };


    public DepartmentDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'department' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DEPARTMENT_ID' INTEGER NOT NULL UNIQUE ," + // 1: departmentId
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'AVATAR' TEXT," + // 3: avatar
                "'SHOW_PARENTS' INTEGER," + // 4: showParents
                "'PARENT_ID' INTEGER," + // 5: parentId
                "'TYPE' INTEGER," + // 6: type
                "'CHAT_GROUP_ID' TEXT," + // 7: chatGroupId
                "'LAST_SYNC' INTEGER);"); // 8: lastSync
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'department'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Department entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDepartmentId());
        stmt.bindString(3, entity.getName());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        Boolean showParents = entity.getShowParents();
        if (showParents != null) {
            stmt.bindLong(5, showParents ? 1l: 0l);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(6, parentId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
 
        String chatGroupId = entity.getChatGroupId();
        if (chatGroupId != null) {
            stmt.bindString(8, chatGroupId);
        }
 
        Long lastSync = entity.getLastSync();
        if (lastSync != null) {
            stmt.bindLong(9, lastSync);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Department readEntity(Cursor cursor, int offset) {
        Department entity = new Department( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // departmentId
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // showParents
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // parentId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // chatGroupId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // lastSync
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Department entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDepartmentId(cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShowParents(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setParentId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setChatGroupId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastSync(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Department entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Department entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
