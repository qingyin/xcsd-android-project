package com.tuxing.sdk.db.dao.user;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tuxing.sdk.db.entity.HomeWorkRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HomeWorkRecord.
*/
public class HomeWorkRecordDao extends AbstractDao<HomeWorkRecord, Long> {

    public static final String TABLENAME = "HomeWorkRecord";

    /**
     * Properties of entity HomeWorkRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HwRecordId = new Property(1, Long.class, "hwRecordId", false, "HW_RECORD_ID");
        public final static Property MemberId = new Property(2, Long.class, "memberId", false, "MEMBER_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property SendUserId = new Property(4, Long.class, "sendUserId", false, "SEND_USER_ID");
        public final static Property SenderName = new Property(5, String.class, "senderName", false, "SENDER_NAME");
        public final static Property SenderAvatar = new Property(6, String.class, "senderAvatar", false, "SENDER_AVATAR");
        public final static Property TargetName = new Property(7, String.class, "targetName", false, "TARGET_NAME");
        public final static Property Status = new Property(8, Integer.class, "status", false, "STATUS");
        public final static Property HasRead = new Property(9, Boolean.class, "hasRead", false, "HAS_READ");
        public final static Property SendTime = new Property(10, Long.class, "sendTime", false, "SEND_TIME");
    };


    public HomeWorkRecordDao(DaoConfig config) {
        super(config);
    }
    
    public HomeWorkRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HomeWorkRecord' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'HW_RECORD_ID' INTEGER," + // 1: hwRecordId
                "'MEMBER_ID' INTEGER," + // 2: memberId
                "'TITLE' TEXT," + // 3: title
                "'SEND_USER_ID' INTEGER," + // 4: sendUserId
                "'SENDER_NAME' TEXT," + // 5: senderName
                "'SENDER_AVATAR' TEXT," + // 6: senderAvatar
                "'TARGET_NAME' TEXT," + // 7: targetName
                "'STATUS' INTEGER," + // 8: status
                "'HAS_READ' INTEGER," + // 9: hasRead
                "'SEND_TIME' INTEGER);"); // 10: sendTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HomeWorkRecord'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeWorkRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long hwRecordId = entity.getHwRecordId();
        if (hwRecordId != null) {
            stmt.bindLong(2, hwRecordId);
        }
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(3, memberId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        Long sendUserId = entity.getSendUserId();
        if (sendUserId != null) {
            stmt.bindLong(5, sendUserId);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(6, senderName);
        }
 
        String senderAvatar = entity.getSenderAvatar();
        if (senderAvatar != null) {
            stmt.bindString(7, senderAvatar);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(8, targetName);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }
 
        Boolean hasRead = entity.getHasRead();
        if (hasRead != null) {
            stmt.bindLong(10, hasRead ? 1l: 0l);
        }
 
        Long sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(11, sendTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeWorkRecord readEntity(Cursor cursor, int offset) {
        HomeWorkRecord entity = new HomeWorkRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // hwRecordId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // memberId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // sendUserId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // senderName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // senderAvatar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // targetName
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // hasRead
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // sendTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeWorkRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHwRecordId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMemberId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSenderName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSenderAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTargetName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setHasRead(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setSendTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeWorkRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeWorkRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
