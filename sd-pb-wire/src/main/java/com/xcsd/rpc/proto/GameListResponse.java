// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Game.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * 获取游戏列表
 */
public final class GameListResponse extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<Game> DEFAULT_GAMELIST = Collections.emptyList();

  @ProtoField(tag = 1, label = REPEATED, messageType = Game.class)
  public final List<Game> gameList;

  public GameListResponse(List<Game> gameList) {
    this.gameList = immutableCopyOf(gameList);
  }

  private GameListResponse(Builder builder) {
    this(builder.gameList);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GameListResponse)) return false;
    return equals(gameList, ((GameListResponse) other).gameList);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    return result != 0 ? result : (hashCode = gameList != null ? gameList.hashCode() : 1);
  }

  public static final class Builder extends Message.Builder<GameListResponse> {

    public List<Game> gameList;

    public Builder() {
    }

    public Builder(GameListResponse message) {
      super(message);
      if (message == null) return;
      this.gameList = copyOf(message.gameList);
    }

    public Builder gameList(List<Game> gameList) {
      this.gameList = checkForNulls(gameList);
      return this;
    }

    @Override
    public GameListResponse build() {
      return new GameListResponse(this);
    }
  }

  public static final class Game extends Message {
    private static final long serialVersionUID = 0L;

    public static final Long DEFAULT_GAMEID = 0L;
    public static final String DEFAULT_GAMENAME = "";
    public static final String DEFAULT_ABILITYNAME = "";
    public static final Integer DEFAULT_LEVELCOUNT = 0;
    public static final String DEFAULT_PICURL = "";
    public static final String DEFAULT_COLOR = "";

    /**
     * 游戏ID
     */
    @ProtoField(tag = 1, type = INT64, label = REQUIRED)
    public final Long gameId;

    /**
     * 游戏名称
     */
    @ProtoField(tag = 2, type = STRING)
    public final String gameName;

    /**
     * 能力名称
     */
    @ProtoField(tag = 3, type = STRING)
    public final String abilityName;

    /**
     * 关卡数量
     */
    @ProtoField(tag = 4, type = INT32)
    public final Integer levelCount;

    /**
     * 图片URL
     */
    @ProtoField(tag = 5, type = STRING)
    public final String picUrl;

    /**
     * 颜色值16进制
     */
    @ProtoField(tag = 6, type = STRING)
    public final String color;

    public Game(Long gameId, String gameName, String abilityName, Integer levelCount, String picUrl, String color) {
      this.gameId = gameId;
      this.gameName = gameName;
      this.abilityName = abilityName;
      this.levelCount = levelCount;
      this.picUrl = picUrl;
      this.color = color;
    }

    private Game(Builder builder) {
      this(builder.gameId, builder.gameName, builder.abilityName, builder.levelCount, builder.picUrl, builder.color);
      setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Game)) return false;
      Game o = (Game) other;
      return equals(gameId, o.gameId)
          && equals(gameName, o.gameName)
          && equals(abilityName, o.abilityName)
          && equals(levelCount, o.levelCount)
          && equals(picUrl, o.picUrl)
          && equals(color, o.color);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = gameId != null ? gameId.hashCode() : 0;
        result = result * 37 + (gameName != null ? gameName.hashCode() : 0);
        result = result * 37 + (abilityName != null ? abilityName.hashCode() : 0);
        result = result * 37 + (levelCount != null ? levelCount.hashCode() : 0);
        result = result * 37 + (picUrl != null ? picUrl.hashCode() : 0);
        result = result * 37 + (color != null ? color.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<Game> {

      public Long gameId;
      public String gameName;
      public String abilityName;
      public Integer levelCount;
      public String picUrl;
      public String color;

      public Builder() {
      }

      public Builder(Game message) {
        super(message);
        if (message == null) return;
        this.gameId = message.gameId;
        this.gameName = message.gameName;
        this.abilityName = message.abilityName;
        this.levelCount = message.levelCount;
        this.picUrl = message.picUrl;
        this.color = message.color;
      }

      /**
       * 游戏ID
       */
      public Builder gameId(Long gameId) {
        this.gameId = gameId;
        return this;
      }

      /**
       * 游戏名称
       */
      public Builder gameName(String gameName) {
        this.gameName = gameName;
        return this;
      }

      /**
       * 能力名称
       */
      public Builder abilityName(String abilityName) {
        this.abilityName = abilityName;
        return this;
      }

      /**
       * 关卡数量
       */
      public Builder levelCount(Integer levelCount) {
        this.levelCount = levelCount;
        return this;
      }

      /**
       * 图片URL
       */
      public Builder picUrl(String picUrl) {
        this.picUrl = picUrl;
        return this;
      }

      /**
       * 颜色值16进制
       */
      public Builder color(String color) {
        this.color = color;
        return this;
      }

      @Override
      public Game build() {
        checkRequiredFields();
        return new Game(this);
      }
    }
  }
}
