// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Homework.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class GenerateHomeworkResponse extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<UserHomework> DEFAULT_USERHOMEWORKS = Collections.emptyList();

  @ProtoField(tag = 1, label = REPEATED, messageType = UserHomework.class)
  public final List<UserHomework> userHomeworks;

  public GenerateHomeworkResponse(List<UserHomework> userHomeworks) {
    this.userHomeworks = immutableCopyOf(userHomeworks);
  }

  private GenerateHomeworkResponse(Builder builder) {
    this(builder.userHomeworks);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GenerateHomeworkResponse)) return false;
    return equals(userHomeworks, ((GenerateHomeworkResponse) other).userHomeworks);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    return result != 0 ? result : (hashCode = userHomeworks != null ? userHomeworks.hashCode() : 1);
  }

  public static final class Builder extends Message.Builder<GenerateHomeworkResponse> {

    public List<UserHomework> userHomeworks;

    public Builder() {
    }

    public Builder(GenerateHomeworkResponse message) {
      super(message);
      if (message == null) return;
      this.userHomeworks = copyOf(message.userHomeworks);
    }

    public Builder userHomeworks(List<UserHomework> userHomeworks) {
      this.userHomeworks = checkForNulls(userHomeworks);
      return this;
    }

    @Override
    public GenerateHomeworkResponse build() {
      return new GenerateHomeworkResponse(this);
    }
  }

  public static final class UserHomework extends Message {
    private static final long serialVersionUID = 0L;

    public static final Long DEFAULT_CHILDUSERID = 0L;
    public static final String DEFAULT_NAME = "";
    public static final String DEFAULT_AVATAR = "";
    public static final Integer DEFAULT_GENERATECOUNT = 0;
    public static final Integer DEFAULT_REMAINMAXCOUNT = 0;
    public static final Boolean DEFAULT_SPECIALATTENTION = false;

    @ProtoField(tag = 1, type = INT64, label = REQUIRED)
    public final Long childUserId;

    @ProtoField(tag = 2, type = STRING, label = REQUIRED)
    public final String name;

    @ProtoField(tag = 3, type = STRING)
    public final String avatar;

    /**
     * 作业生成数量
     */
    @ProtoField(tag = 4, type = INT32, label = REQUIRED)
    public final Integer generateCount;

    /**
     * 当前最多能布置的作业数量
     */
    @ProtoField(tag = 5, type = INT32, label = REQUIRED)
    public final Integer remainMaxCount;

    /**
     * 是否是特别关注学生
     */
    @ProtoField(tag = 6, type = BOOL)
    public final Boolean specialAttention;

    public UserHomework(Long childUserId, String name, String avatar, Integer generateCount, Integer remainMaxCount, Boolean specialAttention) {
      this.childUserId = childUserId;
      this.name = name;
      this.avatar = avatar;
      this.generateCount = generateCount;
      this.remainMaxCount = remainMaxCount;
      this.specialAttention = specialAttention;
    }

    private UserHomework(Builder builder) {
      this(builder.childUserId, builder.name, builder.avatar, builder.generateCount, builder.remainMaxCount, builder.specialAttention);
      setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof UserHomework)) return false;
      UserHomework o = (UserHomework) other;
      return equals(childUserId, o.childUserId)
          && equals(name, o.name)
          && equals(avatar, o.avatar)
          && equals(generateCount, o.generateCount)
          && equals(remainMaxCount, o.remainMaxCount)
          && equals(specialAttention, o.specialAttention);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = childUserId != null ? childUserId.hashCode() : 0;
        result = result * 37 + (name != null ? name.hashCode() : 0);
        result = result * 37 + (avatar != null ? avatar.hashCode() : 0);
        result = result * 37 + (generateCount != null ? generateCount.hashCode() : 0);
        result = result * 37 + (remainMaxCount != null ? remainMaxCount.hashCode() : 0);
        result = result * 37 + (specialAttention != null ? specialAttention.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<UserHomework> {

      public Long childUserId;
      public String name;
      public String avatar;
      public Integer generateCount;
      public Integer remainMaxCount;
      public Boolean specialAttention;

      public Builder() {
      }

      public Builder(UserHomework message) {
        super(message);
        if (message == null) return;
        this.childUserId = message.childUserId;
        this.name = message.name;
        this.avatar = message.avatar;
        this.generateCount = message.generateCount;
        this.remainMaxCount = message.remainMaxCount;
        this.specialAttention = message.specialAttention;
      }

      public Builder childUserId(Long childUserId) {
        this.childUserId = childUserId;
        return this;
      }

      public Builder name(String name) {
        this.name = name;
        return this;
      }

      public Builder avatar(String avatar) {
        this.avatar = avatar;
        return this;
      }

      /**
       * 作业生成数量
       */
      public Builder generateCount(Integer generateCount) {
        this.generateCount = generateCount;
        return this;
      }

      /**
       * 当前最多能布置的作业数量
       */
      public Builder remainMaxCount(Integer remainMaxCount) {
        this.remainMaxCount = remainMaxCount;
        return this;
      }

      /**
       * 是否是特别关注学生
       */
      public Builder specialAttention(Boolean specialAttention) {
        this.specialAttention = specialAttention;
        return this;
      }

      @Override
      public UserHomework build() {
        checkRequiredFields();
        return new UserHomework(this);
      }
    }
  }
}
