// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Game.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * 游戏关卡
 */
public final class GameLevel extends Message {
  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_GAMEID = 0L;
  public static final Integer DEFAULT_LEVEL = 0;
  public static final String DEFAULT_GAMENAME = "";
  public static final String DEFAULT_ABILITYNAME = "";
  public static final String DEFAULT_PICURL = "";
  public static final Integer DEFAULT_STARS = 0;
  public static final String DEFAULT_COLOR = "";
  public static final Integer DEFAULT_ABILITYID = 0;
  public static final Boolean DEFAULT_HASGUIDE = false;

  @ProtoField(tag = 1, type = INT64, label = REQUIRED)
  public final Long gameId;

  @ProtoField(tag = 2, type = INT32, label = REQUIRED)
  public final Integer level;

  @ProtoField(tag = 3, type = STRING)
  public final String gameName;

  @ProtoField(tag = 4, type = STRING)
  public final String abilityName;

  @ProtoField(tag = 5, type = STRING)
  public final String picUrl;

  /**
   * 作业星级	是否显示决定于作业状态
   */
  @ProtoField(tag = 6, type = INT32)
  public final Integer stars;

  @ProtoField(tag = 7, type = STRING)
  public final String color;

  /**
   * 能力ID
   */
  @ProtoField(tag = 8, type = INT32)
  public final Integer abilityId;

  /**
   * 是否有新手引导
   */
  @ProtoField(tag = 9, type = BOOL)
  public final Boolean hasGuide;

  public GameLevel(Long gameId, Integer level, String gameName, String abilityName, String picUrl, Integer stars, String color, Integer abilityId, Boolean hasGuide) {
    this.gameId = gameId;
    this.level = level;
    this.gameName = gameName;
    this.abilityName = abilityName;
    this.picUrl = picUrl;
    this.stars = stars;
    this.color = color;
    this.abilityId = abilityId;
    this.hasGuide = hasGuide;
  }

  private GameLevel(Builder builder) {
    this(builder.gameId, builder.level, builder.gameName, builder.abilityName, builder.picUrl, builder.stars, builder.color, builder.abilityId, builder.hasGuide);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GameLevel)) return false;
    GameLevel o = (GameLevel) other;
    return equals(gameId, o.gameId)
        && equals(level, o.level)
        && equals(gameName, o.gameName)
        && equals(abilityName, o.abilityName)
        && equals(picUrl, o.picUrl)
        && equals(stars, o.stars)
        && equals(color, o.color)
        && equals(abilityId, o.abilityId)
        && equals(hasGuide, o.hasGuide);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = gameId != null ? gameId.hashCode() : 0;
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (gameName != null ? gameName.hashCode() : 0);
      result = result * 37 + (abilityName != null ? abilityName.hashCode() : 0);
      result = result * 37 + (picUrl != null ? picUrl.hashCode() : 0);
      result = result * 37 + (stars != null ? stars.hashCode() : 0);
      result = result * 37 + (color != null ? color.hashCode() : 0);
      result = result * 37 + (abilityId != null ? abilityId.hashCode() : 0);
      result = result * 37 + (hasGuide != null ? hasGuide.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GameLevel> {

    public Long gameId;
    public Integer level;
    public String gameName;
    public String abilityName;
    public String picUrl;
    public Integer stars;
    public String color;
    public Integer abilityId;
    public Boolean hasGuide;

    public Builder() {
    }

    public Builder(GameLevel message) {
      super(message);
      if (message == null) return;
      this.gameId = message.gameId;
      this.level = message.level;
      this.gameName = message.gameName;
      this.abilityName = message.abilityName;
      this.picUrl = message.picUrl;
      this.stars = message.stars;
      this.color = message.color;
      this.abilityId = message.abilityId;
      this.hasGuide = message.hasGuide;
    }

    public Builder gameId(Long gameId) {
      this.gameId = gameId;
      return this;
    }

    public Builder level(Integer level) {
      this.level = level;
      return this;
    }

    public Builder gameName(String gameName) {
      this.gameName = gameName;
      return this;
    }

    public Builder abilityName(String abilityName) {
      this.abilityName = abilityName;
      return this;
    }

    public Builder picUrl(String picUrl) {
      this.picUrl = picUrl;
      return this;
    }

    /**
     * 作业星级	是否显示决定于作业状态
     */
    public Builder stars(Integer stars) {
      this.stars = stars;
      return this;
    }

    public Builder color(String color) {
      this.color = color;
      return this;
    }

    /**
     * 能力ID
     */
    public Builder abilityId(Integer abilityId) {
      this.abilityId = abilityId;
      return this;
    }

    /**
     * 是否有新手引导
     */
    public Builder hasGuide(Boolean hasGuide) {
      this.hasGuide = hasGuide;
      return this;
    }

    @Override
    public GameLevel build() {
      checkRequiredFields();
      return new GameLevel(this);
    }
  }
}
