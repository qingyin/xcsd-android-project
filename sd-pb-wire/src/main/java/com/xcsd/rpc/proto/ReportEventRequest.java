// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Data.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * URL:/data/event
 */
public final class ReportEventRequest extends Message {
  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_SERIALNO = 0L;
  public static final List<Event> DEFAULT_EVENTLIST = Collections.emptyList();
  public static final Long DEFAULT_SENDTIME = 0L;

  /**
   * 客户端批次号
   */
  @ProtoField(tag = 1, type = INT64, label = REQUIRED)
  public final Long serialNo;

  @ProtoField(tag = 2, label = REPEATED, messageType = Event.class)
  public final List<Event> eventList;

  /**
   * 客户端发送时的时间戳
   */
  @ProtoField(tag = 3, type = INT64)
  public final Long sendTime;

  public ReportEventRequest(Long serialNo, List<Event> eventList, Long sendTime) {
    this.serialNo = serialNo;
    this.eventList = immutableCopyOf(eventList);
    this.sendTime = sendTime;
  }

  private ReportEventRequest(Builder builder) {
    this(builder.serialNo, builder.eventList, builder.sendTime);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ReportEventRequest)) return false;
    ReportEventRequest o = (ReportEventRequest) other;
    return equals(serialNo, o.serialNo)
        && equals(eventList, o.eventList)
        && equals(sendTime, o.sendTime);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = serialNo != null ? serialNo.hashCode() : 0;
      result = result * 37 + (eventList != null ? eventList.hashCode() : 1);
      result = result * 37 + (sendTime != null ? sendTime.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ReportEventRequest> {

    public Long serialNo;
    public List<Event> eventList;
    public Long sendTime;

    public Builder() {
    }

    public Builder(ReportEventRequest message) {
      super(message);
      if (message == null) return;
      this.serialNo = message.serialNo;
      this.eventList = copyOf(message.eventList);
      this.sendTime = message.sendTime;
    }

    /**
     * 客户端批次号
     */
    public Builder serialNo(Long serialNo) {
      this.serialNo = serialNo;
      return this;
    }

    public Builder eventList(List<Event> eventList) {
      this.eventList = checkForNulls(eventList);
      return this;
    }

    /**
     * 客户端发送时的时间戳
     */
    public Builder sendTime(Long sendTime) {
      this.sendTime = sendTime;
      return this;
    }

    @Override
    public ReportEventRequest build() {
      checkRequiredFields();
      return new ReportEventRequest(this);
    }
  }
}
