// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Homework.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * 家长端接口
 * 作业结构体
 */
public final class Homework extends Message {
  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;
  public static final Long DEFAULT_MEMBERID = 0L;
  public static final String DEFAULT_TITLE = "";
  public static final Long DEFAULT_SENDUSERID = 0L;
  public static final String DEFAULT_SENDERNAME = "";
  public static final String DEFAULT_SENDERAVATAR = "";
  public static final String DEFAULT_TARGETNAME = "";
  public static final HomeworkStatus DEFAULT_STATUS = HomeworkStatus.UNFINISHED;
  public static final Boolean DEFAULT_HASREAD = false;
  public static final Long DEFAULT_SENDTIME = 0L;

  /**
   * 作业展示ID，对应家长端显示的信息，删除时传此ID
   */
  @ProtoField(tag = 1, type = INT64, label = REQUIRED)
  public final Long id;

  /**
   * 作业成员ID，对应参与作业的儿童，在点击作业条目时给html5传此ID
   */
  @ProtoField(tag = 2, type = INT64, label = REQUIRED)
  public final Long memberId;

  @ProtoField(tag = 3, type = STRING, label = REQUIRED)
  public final String title;

  @ProtoField(tag = 4, type = INT64, label = REQUIRED)
  public final Long sendUserId;

  @ProtoField(tag = 5, type = STRING)
  public final String senderName;

  @ProtoField(tag = 6, type = STRING)
  public final String senderAvatar;

  @ProtoField(tag = 7, type = STRING)
  public final String targetName;

  /**
   * 状态 0待做 1已做
   */
  @ProtoField(tag = 8, type = ENUM, label = REQUIRED)
  public final HomeworkStatus status;

  /**
   * 0未读 1已读
   */
  @ProtoField(tag = 9, type = BOOL)
  public final Boolean hasRead;

  @ProtoField(tag = 10, type = INT64, label = REQUIRED)
  public final Long sendTime;

  public Homework(Long id, Long memberId, String title, Long sendUserId, String senderName, String senderAvatar, String targetName, HomeworkStatus status, Boolean hasRead, Long sendTime) {
    this.id = id;
    this.memberId = memberId;
    this.title = title;
    this.sendUserId = sendUserId;
    this.senderName = senderName;
    this.senderAvatar = senderAvatar;
    this.targetName = targetName;
    this.status = status;
    this.hasRead = hasRead;
    this.sendTime = sendTime;
  }

  private Homework(Builder builder) {
    this(builder.id, builder.memberId, builder.title, builder.sendUserId, builder.senderName, builder.senderAvatar, builder.targetName, builder.status, builder.hasRead, builder.sendTime);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Homework)) return false;
    Homework o = (Homework) other;
    return equals(id, o.id)
        && equals(memberId, o.memberId)
        && equals(title, o.title)
        && equals(sendUserId, o.sendUserId)
        && equals(senderName, o.senderName)
        && equals(senderAvatar, o.senderAvatar)
        && equals(targetName, o.targetName)
        && equals(status, o.status)
        && equals(hasRead, o.hasRead)
        && equals(sendTime, o.sendTime);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = id != null ? id.hashCode() : 0;
      result = result * 37 + (memberId != null ? memberId.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (sendUserId != null ? sendUserId.hashCode() : 0);
      result = result * 37 + (senderName != null ? senderName.hashCode() : 0);
      result = result * 37 + (senderAvatar != null ? senderAvatar.hashCode() : 0);
      result = result * 37 + (targetName != null ? targetName.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (hasRead != null ? hasRead.hashCode() : 0);
      result = result * 37 + (sendTime != null ? sendTime.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Homework> {

    public Long id;
    public Long memberId;
    public String title;
    public Long sendUserId;
    public String senderName;
    public String senderAvatar;
    public String targetName;
    public HomeworkStatus status;
    public Boolean hasRead;
    public Long sendTime;

    public Builder() {
    }

    public Builder(Homework message) {
      super(message);
      if (message == null) return;
      this.id = message.id;
      this.memberId = message.memberId;
      this.title = message.title;
      this.sendUserId = message.sendUserId;
      this.senderName = message.senderName;
      this.senderAvatar = message.senderAvatar;
      this.targetName = message.targetName;
      this.status = message.status;
      this.hasRead = message.hasRead;
      this.sendTime = message.sendTime;
    }

    /**
     * 作业展示ID，对应家长端显示的信息，删除时传此ID
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 作业成员ID，对应参与作业的儿童，在点击作业条目时给html5传此ID
     */
    public Builder memberId(Long memberId) {
      this.memberId = memberId;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder sendUserId(Long sendUserId) {
      this.sendUserId = sendUserId;
      return this;
    }

    public Builder senderName(String senderName) {
      this.senderName = senderName;
      return this;
    }

    public Builder senderAvatar(String senderAvatar) {
      this.senderAvatar = senderAvatar;
      return this;
    }

    public Builder targetName(String targetName) {
      this.targetName = targetName;
      return this;
    }

    /**
     * 状态 0待做 1已做
     */
    public Builder status(HomeworkStatus status) {
      this.status = status;
      return this;
    }

    /**
     * 0未读 1已读
     */
    public Builder hasRead(Boolean hasRead) {
      this.hasRead = hasRead;
      return this;
    }

    public Builder sendTime(Long sendTime) {
      this.sendTime = sendTime;
      return this;
    }

    @Override
    public Homework build() {
      checkRequiredFields();
      return new Homework(this);
    }
  }
}
