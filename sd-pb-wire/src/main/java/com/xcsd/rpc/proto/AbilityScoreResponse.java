// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/LearningAbility.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.DOUBLE;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class AbilityScoreResponse extends Message {
  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TOTALSCORE = 0;
  public static final List<GameScore> DEFAULT_GAMELIST = Collections.emptyList();

  @ProtoField(tag = 1, type = INT32, label = REQUIRED)
  public final Integer totalScore;

  @ProtoField(tag = 2, label = REPEATED, messageType = GameScore.class)
  public final List<GameScore> gameList;

  public AbilityScoreResponse(Integer totalScore, List<GameScore> gameList) {
    this.totalScore = totalScore;
    this.gameList = immutableCopyOf(gameList);
  }

  private AbilityScoreResponse(Builder builder) {
    this(builder.totalScore, builder.gameList);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AbilityScoreResponse)) return false;
    AbilityScoreResponse o = (AbilityScoreResponse) other;
    return equals(totalScore, o.totalScore)
        && equals(gameList, o.gameList);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = totalScore != null ? totalScore.hashCode() : 0;
      result = result * 37 + (gameList != null ? gameList.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<AbilityScoreResponse> {

    public Integer totalScore;
    public List<GameScore> gameList;

    public Builder() {
    }

    public Builder(AbilityScoreResponse message) {
      super(message);
      if (message == null) return;
      this.totalScore = message.totalScore;
      this.gameList = copyOf(message.gameList);
    }

    public Builder totalScore(Integer totalScore) {
      this.totalScore = totalScore;
      return this;
    }

    public Builder gameList(List<GameScore> gameList) {
      this.gameList = checkForNulls(gameList);
      return this;
    }

    @Override
    public AbilityScoreResponse build() {
      checkRequiredFields();
      return new AbilityScoreResponse(this);
    }
  }

  public static final class GameScore extends Message {
    private static final long serialVersionUID = 0L;

    public static final Integer DEFAULT_GAMEID = 0;
    public static final String DEFAULT_GAMENAME = "";
    public static final Integer DEFAULT_SCORE = 0;
    public static final Integer DEFAULT_BESTLEVEL = 0;
    public static final Double DEFAULT_PERCENTAGE = 0D;
    public static final String DEFAULT_COLOR = "";

    @ProtoField(tag = 1, type = INT32, label = REQUIRED)
    public final Integer gameId;

    @ProtoField(tag = 2, type = STRING)
    public final String gameName;

    @ProtoField(tag = 3, type = INT32)
    public final Integer score;

    @ProtoField(tag = 4, type = INT32)
    public final Integer bestLevel;

    @ProtoField(tag = 5, type = DOUBLE)
    public final Double percentage;

    @ProtoField(tag = 6, type = STRING)
    public final String color;

    public GameScore(Integer gameId, String gameName, Integer score, Integer bestLevel, Double percentage, String color) {
      this.gameId = gameId;
      this.gameName = gameName;
      this.score = score;
      this.bestLevel = bestLevel;
      this.percentage = percentage;
      this.color = color;
    }

    private GameScore(Builder builder) {
      this(builder.gameId, builder.gameName, builder.score, builder.bestLevel, builder.percentage, builder.color);
      setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof GameScore)) return false;
      GameScore o = (GameScore) other;
      return equals(gameId, o.gameId)
          && equals(gameName, o.gameName)
          && equals(score, o.score)
          && equals(bestLevel, o.bestLevel)
          && equals(percentage, o.percentage)
          && equals(color, o.color);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = gameId != null ? gameId.hashCode() : 0;
        result = result * 37 + (gameName != null ? gameName.hashCode() : 0);
        result = result * 37 + (score != null ? score.hashCode() : 0);
        result = result * 37 + (bestLevel != null ? bestLevel.hashCode() : 0);
        result = result * 37 + (percentage != null ? percentage.hashCode() : 0);
        result = result * 37 + (color != null ? color.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<GameScore> {

      public Integer gameId;
      public String gameName;
      public Integer score;
      public Integer bestLevel;
      public Double percentage;
      public String color;

      public Builder() {
      }

      public Builder(GameScore message) {
        super(message);
        if (message == null) return;
        this.gameId = message.gameId;
        this.gameName = message.gameName;
        this.score = message.score;
        this.bestLevel = message.bestLevel;
        this.percentage = message.percentage;
        this.color = message.color;
      }

      public Builder gameId(Integer gameId) {
        this.gameId = gameId;
        return this;
      }

      public Builder gameName(String gameName) {
        this.gameName = gameName;
        return this;
      }

      public Builder score(Integer score) {
        this.score = score;
        return this;
      }

      public Builder bestLevel(Integer bestLevel) {
        this.bestLevel = bestLevel;
        return this;
      }

      public Builder percentage(Double percentage) {
        this.percentage = percentage;
        return this;
      }

      public Builder color(String color) {
        this.color = color;
        return this;
      }

      @Override
      public GameScore build() {
        checkRequiredFields();
        return new GameScore(this);
      }
    }
  }
}
