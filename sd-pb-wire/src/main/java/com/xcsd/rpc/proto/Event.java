// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Data.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class Event extends Message {
  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_USERID = 0L;
  public static final EventType DEFAULT_EVENTTYPE = EventType.APP_LOGIN;
  public static final Long DEFAULT_BID = 0L;
  public static final Long DEFAULT_TIMESTAMP = 0L;

  /**
   * 触发事件的用户ID
   */
  @ProtoField(tag = 1, type = INT64, label = REQUIRED)
  public final Long userId;

  @ProtoField(tag = 2, type = ENUM, label = REQUIRED)
  public final EventType eventType;

  @ProtoField(tag = 3, type = INT64)
  public final Long bid;

  /**
   * 业务时间
   */
  @ProtoField(tag = 4, type = INT64, label = REQUIRED)
  public final Long timestamp;

  public Event(Long userId, EventType eventType, Long bid, Long timestamp) {
    this.userId = userId;
    this.eventType = eventType;
    this.bid = bid;
    this.timestamp = timestamp;
  }

  private Event(Builder builder) {
    this(builder.userId, builder.eventType, builder.bid, builder.timestamp);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Event)) return false;
    Event o = (Event) other;
    return equals(userId, o.userId)
        && equals(eventType, o.eventType)
        && equals(bid, o.bid)
        && equals(timestamp, o.timestamp);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = userId != null ? userId.hashCode() : 0;
      result = result * 37 + (eventType != null ? eventType.hashCode() : 0);
      result = result * 37 + (bid != null ? bid.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Event> {

    public Long userId;
    public EventType eventType;
    public Long bid;
    public Long timestamp;

    public Builder() {
    }

    public Builder(Event message) {
      super(message);
      if (message == null) return;
      this.userId = message.userId;
      this.eventType = message.eventType;
      this.bid = message.bid;
      this.timestamp = message.timestamp;
    }

    /**
     * 触发事件的用户ID
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    public Builder eventType(EventType eventType) {
      this.eventType = eventType;
      return this;
    }

    public Builder bid(Long bid) {
      this.bid = bid;
      return this;
    }

    /**
     * 业务时间
     */
    public Builder timestamp(Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    @Override
    public Event build() {
      checkRequiredFields();
      return new Event(this);
    }
  }
}
