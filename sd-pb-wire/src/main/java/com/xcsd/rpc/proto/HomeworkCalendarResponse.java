// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Homework.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Label.REPEATED;

public final class HomeworkCalendarResponse extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<Integer> DEFAULT_UNFINISHED = Collections.emptyList();
  public static final List<Integer> DEFAULT_FINISHED = Collections.emptyList();

  /**
   * 未完成的日期
   */
  @ProtoField(tag = 1, type = INT32, label = REPEATED)
  public final List<Integer> unfinished;

  /**
   * 完成的日期
   */
  @ProtoField(tag = 2, type = INT32, label = REPEATED)
  public final List<Integer> finished;

  public HomeworkCalendarResponse(List<Integer> unfinished, List<Integer> finished) {
    this.unfinished = immutableCopyOf(unfinished);
    this.finished = immutableCopyOf(finished);
  }

  private HomeworkCalendarResponse(Builder builder) {
    this(builder.unfinished, builder.finished);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HomeworkCalendarResponse)) return false;
    HomeworkCalendarResponse o = (HomeworkCalendarResponse) other;
    return equals(unfinished, o.unfinished)
        && equals(finished, o.finished);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = unfinished != null ? unfinished.hashCode() : 1;
      result = result * 37 + (finished != null ? finished.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<HomeworkCalendarResponse> {

    public List<Integer> unfinished;
    public List<Integer> finished;

    public Builder() {
    }

    public Builder(HomeworkCalendarResponse message) {
      super(message);
      if (message == null) return;
      this.unfinished = copyOf(message.unfinished);
      this.finished = copyOf(message.finished);
    }

    /**
     * 未完成的日期
     */
    public Builder unfinished(List<Integer> unfinished) {
      this.unfinished = checkForNulls(unfinished);
      return this;
    }

    /**
     * 完成的日期
     */
    public Builder finished(List<Integer> finished) {
      this.finished = checkForNulls(finished);
      return this;
    }

    @Override
    public HomeworkCalendarResponse build() {
      return new HomeworkCalendarResponse(this);
    }
  }
}
