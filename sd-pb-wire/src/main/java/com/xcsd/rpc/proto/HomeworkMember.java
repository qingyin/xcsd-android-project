// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Homework.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class HomeworkMember extends Message {
  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_MEMBERID = 0L;
  public static final String DEFAULT_NAME = "";
  public static final String DEFAULT_AVATAR = "";
  public static final HomeworkStatus DEFAULT_STATUS = HomeworkStatus.UNFINISHED;
  public static final Integer DEFAULT_SCORE = 0;
  public static final Boolean DEFAULT_SPECIALATTENTION = false;

  @ProtoField(tag = 1, type = INT64, label = REQUIRED)
  public final Long memberId;

  @ProtoField(tag = 2, type = STRING, label = REQUIRED)
  public final String name;

  @ProtoField(tag = 3, type = STRING)
  public final String avatar;

  @ProtoField(tag = 4, type = ENUM, label = REQUIRED)
  public final HomeworkStatus status;

  @ProtoField(tag = 5, type = INT32)
  public final Integer score;

  @ProtoField(tag = 6, type = BOOL)
  public final Boolean specialAttention;

  public HomeworkMember(Long memberId, String name, String avatar, HomeworkStatus status, Integer score, Boolean specialAttention) {
    this.memberId = memberId;
    this.name = name;
    this.avatar = avatar;
    this.status = status;
    this.score = score;
    this.specialAttention = specialAttention;
  }

  private HomeworkMember(Builder builder) {
    this(builder.memberId, builder.name, builder.avatar, builder.status, builder.score, builder.specialAttention);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HomeworkMember)) return false;
    HomeworkMember o = (HomeworkMember) other;
    return equals(memberId, o.memberId)
        && equals(name, o.name)
        && equals(avatar, o.avatar)
        && equals(status, o.status)
        && equals(score, o.score)
        && equals(specialAttention, o.specialAttention);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = memberId != null ? memberId.hashCode() : 0;
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (avatar != null ? avatar.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (score != null ? score.hashCode() : 0);
      result = result * 37 + (specialAttention != null ? specialAttention.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<HomeworkMember> {

    public Long memberId;
    public String name;
    public String avatar;
    public HomeworkStatus status;
    public Integer score;
    public Boolean specialAttention;

    public Builder() {
    }

    public Builder(HomeworkMember message) {
      super(message);
      if (message == null) return;
      this.memberId = message.memberId;
      this.name = message.name;
      this.avatar = message.avatar;
      this.status = message.status;
      this.score = message.score;
      this.specialAttention = message.specialAttention;
    }

    public Builder memberId(Long memberId) {
      this.memberId = memberId;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder avatar(String avatar) {
      this.avatar = avatar;
      return this;
    }

    public Builder status(HomeworkStatus status) {
      this.status = status;
      return this;
    }

    public Builder score(Integer score) {
      this.score = score;
      return this;
    }

    public Builder specialAttention(Boolean specialAttention) {
      this.specialAttention = specialAttention;
      return this;
    }

    @Override
    public HomeworkMember build() {
      checkRequiredFields();
      return new HomeworkMember(this);
    }
  }
}
