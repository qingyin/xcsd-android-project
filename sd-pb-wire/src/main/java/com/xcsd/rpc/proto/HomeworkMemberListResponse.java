// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: src/main/resources/proto/Homework.proto
package com.xcsd.rpc.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class HomeworkMemberListResponse extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<HomeworkMember> DEFAULT_MEMBERS = Collections.emptyList();
  public static final Boolean DEFAULT_HASMORE = false;

  @ProtoField(tag = 1, label = REPEATED, messageType = HomeworkMember.class)
  public final List<HomeworkMember> members;

  @ProtoField(tag = 2, type = BOOL, label = REQUIRED)
  public final Boolean hasMore;

  public HomeworkMemberListResponse(List<HomeworkMember> members, Boolean hasMore) {
    this.members = immutableCopyOf(members);
    this.hasMore = hasMore;
  }

  private HomeworkMemberListResponse(Builder builder) {
    this(builder.members, builder.hasMore);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HomeworkMemberListResponse)) return false;
    HomeworkMemberListResponse o = (HomeworkMemberListResponse) other;
    return equals(members, o.members)
        && equals(hasMore, o.hasMore);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = members != null ? members.hashCode() : 1;
      result = result * 37 + (hasMore != null ? hasMore.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<HomeworkMemberListResponse> {

    public List<HomeworkMember> members;
    public Boolean hasMore;

    public Builder() {
    }

    public Builder(HomeworkMemberListResponse message) {
      super(message);
      if (message == null) return;
      this.members = copyOf(message.members);
      this.hasMore = message.hasMore;
    }

    public Builder members(List<HomeworkMember> members) {
      this.members = checkForNulls(members);
      return this;
    }

    public Builder hasMore(Boolean hasMore) {
      this.hasMore = hasMore;
      return this;
    }

    @Override
    public HomeworkMemberListResponse build() {
      checkRequiredFields();
      return new HomeworkMemberListResponse(this);
    }
  }
}
